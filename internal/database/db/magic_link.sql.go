// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: magic_link.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateMagicLink = `-- name: CreateMagicLink :one
INSERT INTO magic_links (
  id, email, token, expires_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, email, token, expires_at
`

type CreateMagicLinkParams struct {
	ID        string           `json:"id"`
	Email     string           `json:"email"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateMagicLink(ctx context.Context, arg CreateMagicLinkParams) (MagicLink, error) {
	row := q.db.QueryRow(ctx, CreateMagicLink,
		arg.ID,
		arg.Email,
		arg.Token,
		arg.ExpiresAt,
	)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
	)
	return i, err
}

const DeleteMagicLink = `-- name: DeleteMagicLink :exec
DELETE FROM magic_links WHERE id = $1
`

func (q *Queries) DeleteMagicLink(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, DeleteMagicLink, id)
	return err
}

const GetMagicLinkByToken = `-- name: GetMagicLinkByToken :one
SELECT id, email, token, expires_at FROM magic_links
WHERE token = $1
`

func (q *Queries) GetMagicLinkByToken(ctx context.Context, token string) (MagicLink, error) {
	row := q.db.QueryRow(ctx, GetMagicLinkByToken, token)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
	)
	return i, err
}
