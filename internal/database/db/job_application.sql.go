// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: job_application.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateJobApplication = `-- name: CreateJobApplication :one
INSERT INTO job_applications (
  id, title, company, user_id, applied_date
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, company, applied_date, user_id, label_id, created_at, updated_at
`

type CreateJobApplicationParams struct {
	ID          string           `json:"id"`
	Title       string           `json:"title"`
	Company     string           `json:"company"`
	UserID      string           `json:"user_id"`
	AppliedDate pgtype.Timestamp `json:"applied_date"`
}

func (q *Queries) CreateJobApplication(ctx context.Context, arg CreateJobApplicationParams) (JobApplication, error) {
	row := q.db.QueryRow(ctx, CreateJobApplication,
		arg.ID,
		arg.Title,
		arg.Company,
		arg.UserID,
		arg.AppliedDate,
	)
	var i JobApplication
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Company,
		&i.AppliedDate,
		&i.UserID,
		&i.LabelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteJobApplication = `-- name: DeleteJobApplication :exec
DELETE FROM job_applications WHERE id = $1
`

func (q *Queries) DeleteJobApplication(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, DeleteJobApplication, id)
	return err
}

const GetAllJobApplications = `-- name: GetAllJobApplications :many
SELECT id, title, company, applied_date, user_id, label_id, created_at, updated_at FROM job_applications
WHERE user_id = $1
`

func (q *Queries) GetAllJobApplications(ctx context.Context, userID string) ([]JobApplication, error) {
	rows, err := q.db.Query(ctx, GetAllJobApplications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobApplication{}
	for rows.Next() {
		var i JobApplication
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Company,
			&i.AppliedDate,
			&i.UserID,
			&i.LabelID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
